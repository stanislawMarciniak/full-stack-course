{"ast":null,"code":"var _jsxFileName = \"/home/stasiek/kursFullstack/part1/src/components/Add.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport personService from \"../services/persons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Add = _ref => {\n  _s();\n  let {\n    persons,\n    setPersons,\n    setNotificationMessage,\n    typeOfNotification\n  } = _ref;\n  const [newName, setNewName] = useState(\"\");\n  const [newPhone, setNewPhone] = useState(\"\");\n  const handlePersonChange = event => setNewName(event.target.value);\n  const handlePhoneChange = event => setNewPhone(event.target.value);\n  const addPerson = event => {\n    event.preventDefault();\n    const namesArray = persons.map(person => person.name);\n    if (namesArray.includes(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one`)) {\n        const person = persons.find(person => person.name === newName);\n        const changedPerson = {\n          ...person,\n          number: newPhone\n        };\n        personService.update(changedPerson, person.id).then(() => setPersons(persons.map(person => person.name !== newName ? person : changedPerson))).catch(error => {\n          typeOfNotification = \"error\";\n          setNotificationMessage(`${changedPerson.name} was already removed from server`);\n          typeOfNotification = \"notification\";\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 4000);\n          console.log(\"deleted\", persons);\n        });\n        setNewName(\"\");\n        setNewPhone(\"\");\n        setNotificationMessage(`Changed ${newName} phone number to ${newPhone}`);\n        setTimeout(() => setNotificationMessage(null), 4000);\n      }\n    }\n    let maxIndex = persons.reduce((max, person) => {\n      return Math.max(max, person.id);\n    });\n    if (!namesArray.includes(newName)) {\n      const personObject = {\n        name: newName,\n        number: newPhone,\n        id: maxIndex + 1\n      };\n      maxIndex++;\n      personService.create(personObject).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName(\"\");\n        setNewPhone(\"\");\n      });\n      setNotificationMessage(`Added ${newName}`);\n      setTimeout(() => setNotificationMessage(null), 4000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addPerson,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handlePersonChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"number: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newPhone,\n          onChange: handlePhoneChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Add, \"K7tR2IIM3QWgROvTmaVrk0whh2M=\");\n_c = Add;\nexport default Add;\nvar _c;\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"names":["useState","personService","Add","persons","setPersons","setNotificationMessage","typeOfNotification","newName","setNewName","newPhone","setNewPhone","handlePersonChange","event","target","value","handlePhoneChange","addPerson","preventDefault","namesArray","map","person","name","includes","window","confirm","find","changedPerson","number","update","id","then","catch","error","setTimeout","console","log","maxIndex","reduce","max","Math","personObject","create","returnedPerson","concat"],"sources":["/home/stasiek/kursFullstack/part1/src/components/Add.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport personService from \"../services/persons\";\n\nconst Add = ({\n  persons,\n  setPersons,\n  setNotificationMessage,\n  typeOfNotification,\n}) => {\n  const [newName, setNewName] = useState(\"\");\n  const [newPhone, setNewPhone] = useState(\"\");\n\n  const handlePersonChange = (event) => setNewName(event.target.value);\n  const handlePhoneChange = (event) => setNewPhone(event.target.value);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const namesArray = persons.map((person) => person.name);\n\n    if (namesArray.includes(newName)) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one`\n        )\n      ) {\n        const person = persons.find((person) => person.name === newName);\n        const changedPerson = { ...person, number: newPhone };\n\n        personService\n          .update(changedPerson, person.id)\n          .then(() =>\n            setPersons(\n              persons.map((person) =>\n                person.name !== newName ? person : changedPerson\n              )\n            )\n          )\n          .catch((error) => {\n            typeOfNotification = \"error\";\n            setNotificationMessage(\n              `${changedPerson.name} was already removed from server`\n            );\n            typeOfNotification = \"notification\";\n            setTimeout(() => {\n              setNotificationMessage(null);\n            }, 4000);\n            console.log(\"deleted\", persons);\n          });\n        setNewName(\"\");\n        setNewPhone(\"\");\n        setNotificationMessage(\n          `Changed ${newName} phone number to ${newPhone}`\n        );\n        setTimeout(() => setNotificationMessage(null), 4000);\n      }\n    }\n\n    let maxIndex = persons.reduce((max, person) => {\n      return Math.max(max, person.id);\n    });\n\n    if (!namesArray.includes(newName)) {\n      const personObject = {\n        name: newName,\n        number: newPhone,\n        id: maxIndex + 1,\n      };\n      maxIndex++;\n      personService.create(personObject).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName(\"\");\n        setNewPhone(\"\");\n      });\n      setNotificationMessage(`Added ${newName}`);\n      setTimeout(() => setNotificationMessage(null), 4000);\n    }\n  };\n\n  return (\n    <>\n      <h2>add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handlePersonChange} />\n        </div>\n        <div>\n          number: <input value={newPhone} onChange={handlePhoneChange} />\n        </div>\n        <button type=\"submit\">add</button>\n      </form>\n    </>\n  );\n};\n\nexport default Add;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,aAAa,MAAM,qBAAqB;AAAC;AAAA;AAEhD,MAAMC,GAAG,GAAG,QAKN;EAAA;EAAA,IALO;IACXC,OAAO;IACPC,UAAU;IACVC,sBAAsB;IACtBC;EACF,CAAC;EACC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,kBAAkB,GAAIC,KAAK,IAAKJ,UAAU,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACpE,MAAMC,iBAAiB,GAAIH,KAAK,IAAKF,WAAW,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAEpE,MAAME,SAAS,GAAIJ,KAAK,IAAK;IAC3BA,KAAK,CAACK,cAAc,EAAE;IAEtB,MAAMC,UAAU,GAAGf,OAAO,CAACgB,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC;IAEvD,IAAIH,UAAU,CAACI,QAAQ,CAACf,OAAO,CAAC,EAAE;MAChC,IACEgB,MAAM,CAACC,OAAO,CACX,GAAEjB,OAAQ,uEAAsE,CAClF,EACD;QACA,MAAMa,MAAM,GAAGjB,OAAO,CAACsB,IAAI,CAAEL,MAAM,IAAKA,MAAM,CAACC,IAAI,KAAKd,OAAO,CAAC;QAChE,MAAMmB,aAAa,GAAG;UAAE,GAAGN,MAAM;UAAEO,MAAM,EAAElB;QAAS,CAAC;QAErDR,aAAa,CACV2B,MAAM,CAACF,aAAa,EAAEN,MAAM,CAACS,EAAE,CAAC,CAChCC,IAAI,CAAC,MACJ1B,UAAU,CACRD,OAAO,CAACgB,GAAG,CAAEC,MAAM,IACjBA,MAAM,CAACC,IAAI,KAAKd,OAAO,GAAGa,MAAM,GAAGM,aAAa,CACjD,CACF,CACF,CACAK,KAAK,CAAEC,KAAK,IAAK;UAChB1B,kBAAkB,GAAG,OAAO;UAC5BD,sBAAsB,CACnB,GAAEqB,aAAa,CAACL,IAAK,kCAAiC,CACxD;UACDf,kBAAkB,GAAG,cAAc;UACnC2B,UAAU,CAAC,MAAM;YACf5B,sBAAsB,CAAC,IAAI,CAAC;UAC9B,CAAC,EAAE,IAAI,CAAC;UACR6B,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEhC,OAAO,CAAC;QACjC,CAAC,CAAC;QACJK,UAAU,CAAC,EAAE,CAAC;QACdE,WAAW,CAAC,EAAE,CAAC;QACfL,sBAAsB,CACnB,WAAUE,OAAQ,oBAAmBE,QAAS,EAAC,CACjD;QACDwB,UAAU,CAAC,MAAM5B,sBAAsB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MACtD;IACF;IAEA,IAAI+B,QAAQ,GAAGjC,OAAO,CAACkC,MAAM,CAAC,CAACC,GAAG,EAAElB,MAAM,KAAK;MAC7C,OAAOmB,IAAI,CAACD,GAAG,CAACA,GAAG,EAAElB,MAAM,CAACS,EAAE,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI,CAACX,UAAU,CAACI,QAAQ,CAACf,OAAO,CAAC,EAAE;MACjC,MAAMiC,YAAY,GAAG;QACnBnB,IAAI,EAAEd,OAAO;QACboB,MAAM,EAAElB,QAAQ;QAChBoB,EAAE,EAAEO,QAAQ,GAAG;MACjB,CAAC;MACDA,QAAQ,EAAE;MACVnC,aAAa,CAACwC,MAAM,CAACD,YAAY,CAAC,CAACV,IAAI,CAAEY,cAAc,IAAK;QAC1DtC,UAAU,CAACD,OAAO,CAACwC,MAAM,CAACD,cAAc,CAAC,CAAC;QAC1ClC,UAAU,CAAC,EAAE,CAAC;QACdE,WAAW,CAAC,EAAE,CAAC;MACjB,CAAC,CAAC;MACFL,sBAAsB,CAAE,SAAQE,OAAQ,EAAC,CAAC;MAC1C0B,UAAU,CAAC,MAAM5B,sBAAsB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;IACtD;EACF,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,eAClB;MAAM,QAAQ,EAAEW,SAAU;MAAA,wBACxB;QAAA,WAAK,QACG;UAAO,KAAK,EAAET,OAAQ;UAAC,QAAQ,EAAEI;QAAmB;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QACzD,eACN;QAAA,WAAK,UACK;UAAO,KAAK,EAAEF,QAAS;UAAC,QAAQ,EAAEM;QAAkB;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAC3D,eACN;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAG;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC7B;EAAA,gBACN;AAEP,CAAC;AAAC,GA1FIb,GAAG;AAAA,KAAHA,GAAG;AA4FT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}